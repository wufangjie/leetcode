from collections import deque


class Solution(object):
    def findMaxAverage(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: float
        """
        n = len(nums)
        pre = theSum = sum(nums[:k])
        for i in range(k, n):
            pre += nums[i] - nums[i - k]
            if pre > theSum:
                theSum = pre

        theN = k
        pre_k = sum(nums[:k])
        pre = deque([])
        for i in range(n - k):
            pre_k2, k2 = nums[i], 1
            while pre:
                if pre_k2 * pre[0][1] >= pre[0][0] * k2:
                    break
                pre_k2 += pre[0][0]
                k2 += pre[0][1]
                pre.popleft()
            pre.appendleft((pre_k2, k2))

            pre_k += nums[i + k] - nums[i]
            pre_k2, k2 = pre_k, k
            for j, p in enumerate(pre):
                if pre_k2 * p[1] >= p[0] * k2:
                    for _ in range(j, len(pre)):
                        pre.pop()
                    break
                pre_k2 += p[0]
                k2 += p[1]

            if pre_k2 * theN > theSum * k2:
                theSum, theN = pre_k2, k2

        return theSum / (theN + 0.0)


# NOTE: average not sum
print(Solution().findMaxAverage([1,12,-5,-6,50,3], 4), 12.75)
print(Solution().findMaxAverage([7,4,5,8,8,3,9,8,7,6], 7), 7)
print(Solution().findMaxAverage([8,0,1,7,8,6,5,5,6,7], 5), 6.28571)
print(Solution().findMaxAverage([132,566,261,686,865,539,309,66,771,571,645,822,58,610,846,281,521,591,785,436,990,814,154,935,459,98,34,773,616,877,610,748,795,871,786,660,762,447,78,886,18,724,60,76,686,906,709,559,498,495,995,840,661,501,775,473,600,161,246,216,39,208,316,834,431,454,847,194,901,277,80,919,1,492,347,39,399,57,599,249,904,594,89,565,96,217,390,48,730,636,616,769,844,284,956,276,738,155,822,639,432,254,910,786,746,257,825,145,314,776,746,570,723,188,488,819,405,878,219,135,515,835,257,711,471,565,339,209,72,161,200,504,415,110,642,162,367,820,659,34,596,758,604,319,946,444,490,351,323,61,838,190,248,447,901,719,364,241,280,436,754,480,941,170,942,583,684,310,755,695,696,352,453,652,23,751,97,866,102,772,927,293,962,176,92,863,895,457,456,176,893,563,8,186,733,951,122,769,613,877,816,309,581,622,961,605,373,410,471,828,182,398,473,144,574,565,360,822,22,168,998,268,731,6,454,816,957,928,937,922,806,106,231,387,728,545,344,453,307,815,281,490,566,754,986,140,672,698,314,694,219,312,314,950,671,769,119,980,697,56,903,855,162,486,243,242,31,587,696,339,755,329,181,321,436,519,813,108,218,128,154,437,792,469,739,815,590,858,148,639,267,51,495,781,889,90,24,921,29,72,612,784,753,145,457,189,664,271,649,882,751,804,671,543,625,411,711,215,621,859,854,888,910,701,22,799,791,398,72,173,822,36,957,575,181,767,117,846,38,766,80,141,922,104,684,547,867,395,114,840,606,969,81,516,22,103,668,814,501,92,987,323,129,296,250,662,63,367,860,453,486,293,946,408,397,631,308,616,378,422,456,337,743,537,205,766,640,873,932,493,318,271,168,799,919,419,813,335,138,674,140,624,967,87,385,716,70,693,684,448,467,140,785,563,30,991,329,22,216,613,516,886,884,684,685,155,455,499,490,594,525,631,570,844,718,955,912,788,0,596,588,820,88,726,383,118,69,64,141,637,29,9,524,265,45,561,420,501,412,911,447,937,894,17,133,612,325,45,752,677,641,340,497,82,418,232,200,487,296,693,125,325,54,1,590,452,914,363,953,327,274,752,616,168,121,750,132,446,795,884,124,789,576,973,871,995,206,423,482,502,469,959,180,875,960,122,327,875,485,632,554,111,736,170,631,858,272,763,304,420,999,780,561,576,106,784,571,312,559,53,166,28,365,346,256,677,821,583,552,658,568,458,770,304,981,401,162,253,165,819,673,516,951,234,92,57,18,663,369,578,69,536,958,434,234,566,111,407,502,16,66,70,474,836,374,455,589,889,61,106,60,86,623,11,673,715,421,43,379,142,973,800,30,932,234,265,850,697,24,352,713,90,422,540,278,149,347,868,390,408,974,802,847,597,813,520,313,586,563,44,729,537,844,759,821,430,376,671,127,401,24,193,491,798,85,770,299,432,990,41,193,964,843,40,914,9,560,579,595,475,975,324,12,171,84,833,601,460,857,80,213,233,625,705,383,710,827,683,495,169,76,688,133,920,80,399,929,992,978,524,467,305,201,480,476,285,665,77,97,874,510,663,107,135,720,491,198,547,526,693,68,602,381,553,874,813,953,803,805,283,680,272,589,881,104,65,518,122,495,967,996,357,630,456,492,350,299,690,249,177,735,317,779,116,871,6,929,176,809,86,459,841,359,400,722,815,466,592,937,313,560,286,670,542,742,514,893,393,557,494,570,292,812,701,409,35,707,690,211,517,129,22,358,488,423,433,655,241,25,593,554,937,231,576,480,325,90,725,718,647,219,288,940,31,341,701,418,49,743,629,918,872,4,628,712,427,413,368,668,439,313,574,728,544,150,208,221,240,933,939,240,153,579,180,536,920,233,955,321,976,936,239,201,940,220,913,719,633,633,387,424,946,313,153,842,463,713,63,56,999,354,648,504,285,828,40,206,413,347,879,741,284,471,942,576,691,208,296,324,841,35,101,140,349,254,982,164,319,398,220,318,752,868,822,38,48,863,596,813,562,475,555,198,946,849,127,989,57,423,666,251,458,767,391,159,373,725,324,692,123,896,11,228,117,833,618,517,48,214,331,963,41,238,161,340,439,288,329,849,63,347,100,874,114,843,33,487,920,357,532,44,606,543,624,723,728,242,592,129,456,923,92,849,513,605,189,305,894,871,154,309,570,606,183,685,449,217,524,369,926,408,765,532,951,389,607,32,631,200,161,439,475,253,641,989,210,830,294,456,53], 801), 495.75265)
