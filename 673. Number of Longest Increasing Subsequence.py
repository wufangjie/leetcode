import bisect
from collections import defaultdict


class Solution(object):
    def findNumberOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0

        pre, count = [], []
        for elem in nums:
            j = bisect.bisect_left(pre, elem)
            if j == len(pre):
                pre.append(elem)
                count.append(defaultdict(int))
            else:
                pre[j] = elem

            if j == 0:
                add = 1
            else:
                add = sum(v for k, v in count[j - 1].items() if k < elem)
            count[j][elem] += add

        return sum(count[-1].values())



        # if not nums:
        #     return 0

        # pre = []
        # lastIndex = [-1, -1]
        # for i, elem in enumerate(nums):
        #     j = bisect.bisect_left(pre, elem)
        #     if j == len(pre):
        #         pre.append(elem)
        #         lastIndex = [i, i]
        #     else:
        #         pre[j] = elem
        #         if pre[-1] == elem:
        #             lastIndex[1] = i

        # dp = [None] * (lastIndex[1] + 1)
        # lp = len(pre)
        # ret = 0
        # theMax = nums[lastIndex[0]]
        # for i in range(lastIndex[1] + 1):
        #     if nums[i] <= theMax:
        #         longest = count = 1
        #         for j in range(i):
        #             if nums[j] < nums[i]:
        #                 if dp[j][0] + 1 > longest:
        #                     longest = dp[j][0] + 1
        #                     count = dp[j][1]
        #                 elif dp[j][0] + 1 == longest:
        #                     count += dp[j][1]
        #         dp[i] = (longest, count)
        #         if longest == lp:
        #             ret += count
        # return ret


        # # TLE 201/203
        # from collections import defaultdict

        # if not nums:
        #     return 0

        # dp = {}
        # for i, elem in enumerate(nums):
        #     dp[i] = defaultdict(int)
        #     dp[i][1] = 1
        #     for j in range(i):
        #         if nums[j] < elem:
        #             for k, v in dp[j].items():
        #                 dp[i][k + 1] += v
        # theMax = max(max(kv) for kv in dp.values())
        # return sum(kv.get(theMax, 0) for kv in dp.values())


# NOTE: arrange all the same longth in a dict (not all in linear as I did)
# 905ms -> 86ms


print(Solution().findNumberOfLIS([1,3,5,4,7]))
print(Solution().findNumberOfLIS([2,2,2,2,2]))
print(Solution().findNumberOfLIS([7322,32214,68344,-48225,-54846,3883,1874,-72026,47149,-230,57024,-64648,-81568,3636,56485,-46012,-17547,-21405,85381,-46806,-29435,63424,90592,-22085,-75646,24150,75591,-27050,-6239,-79662,-7858,1590,53308,32411,-55914,-74221,13392,-83899,-66953,-62937,-77431,-53063,-29903,-1646,-91782,-866,-97139,14400,70951,-18064,48225,-83571,7049,36864,-53935,1311,-97133,92828,-38488,-19970,10384,-50532,-49942,-54032,24169,-6184,41152,24547,64302,71521,12525,69432,-84677,22385,92703,8169,44237,-2423,56075,42232,-70236,86463,48864,-51986,57283,7316,-97509,-40191,91377,74484,6338,-34801,94404,-65268,47534,87375,64974,-21744,63656,72492,-80387,-65383,-69456,-4309,-54180,55743,-57665,-87706,-25637,-90105,36835,-65691,13084,35359,-91970,3306,-26721,-10612,-54107,-98463,23630,20039,-81161,-25271,25087,94537,-85265,-81635,78561,-35622,53933,-13929,87593,65672,16799,-93377,67184,65126,82937,93170,21105,22569,10200,77953,56796,-73963,29597,-77944,70054,51269,91688,22696,35816,72018,-11181,32971,86819,55471,-91341,69553,-40170,-79086,59075,-3585,-42446,-72807,-10969,-9065,65014,-48930,55903,-71664,84134,90693,70366,72766,72732,15470,71610,60388,98419,69966,38080,-49647,18661,-6128,-28769,-40432,-58781,-30997,66492,97245,-61848,-53577,-19114,-68431,392,24222,-3549,64169,24022,-43139,16110,35869,-42026,57863,-89421,69503,-31634,85058,3307,16760,97667,22728,76169,91199,-707,-13788,79029,41526,585,93256,66830,-91401,21673,16251,-24211,93348,72116,89855,97263,-21248,87218,4841,32594,41450,63241,-74821,-50635,45704,63013,40206,22742,-51592,-88665,40167,86797,-5416,-77958,33263,45370,23090,-85641,23339,12,-39655,92760,58516,-9869,-68989,65277,-56564,-41764,-27602,-16569,89090,-9325,-10994,-26997,-74709,-4512,97361,36260,97926,-75778,34197,-55093,-83479,64698,18207,-83325,-64026,40558,3558,-98914,36896,-9421,78474,-78788,97889,15690,-12867,33416,-35470,43484,98615,61408,-45083,6258,69984,55191,-8349,94091,34436,81124,-450,-33891,52140,98871,-28810,58606,53998,11460,77125,95187,-30373,-42566,48037,90515,25118,-41092,74688,98027,26558,59888,-91724,-93575,-49760,-27327,33890,78527,-70405,-89484,-21706,6518,-24917,-18377,51307,-5325,18834,-33760,-28060,-24191,-76699,-64842,-17157,75067,-87371,-60758,-54532,-45112,57502,29092,30043,-24906,-45519,-78908,76811,48300,-82932,42565,-59254,-10405,4166,5127,-2508,49118,-68613,24902,60871,75227,15214,80607,-86653,33539,-36305,-59518,-18615,91066,57936,-59395,-69,16005,-40726,-39529,18308,-79503,-96099,-40850,23511,70644,-7941,75004,49375,35846,59578,-29648,-74401,-56603,58993,28796,23886,31556,-81613,-99609,-39163,26971,90403,-83353,71515,-17270,-38742,39597,30349,71164,8586,95601,-88292,89175,-67276,-95996,7265,88383,96429,-53737,25141,96214,-87625,-72424,-37252,83464,56084,-9955,85988,-912,-49958,-88635,14419,16309,-2511,58372,-19640,-30344,18957,91617,-74288,-85797,-47935,-31956,-5767,-78632,-715,61958,1871,84912,-90379,40098,60030,31192,-22181,-20344,58392,83989,-62056,-38870,-59955,81094,-20817,-57643,-18030,46341,-37118,-69867,34877,99567,-36963,-66486,-12481,38696,54171,-42937,-65407,10246,18924,43021,31625,10423,2255,69962,20099,21322,22614,51070,-39653,67584,-59533,-30525,70257,-81461,21479,-76813,74944,-60367,-80816,-70793,-22261,-96886,62817,-72566,69096,97617,-22148,-4184,-58780,85409,-659,-80341,28561,97467,89002,-10807,69083,72047,-92615,84547,26452,-74518,46327,-26067,97572,-25567,33538,35466,-21838,16015,-95672,84987,71423,16381,-35288,-17203,35901,73648,15712,29705,59058,34372,-76457,-78718,-7425,4317,38611,14592,76462,87769,98170,-35934,50145,-10087,-16303,-67635,22592,56556,-39137,43540,-75113,30010,-28427,-27757,7463,-65846,-82781,-98005,-39047,-14862,-18866,-7744,9973,36002,-69118,-64819,-91893,-9161,-52691,-44890,36876,-14232,-87725,-79529,20506,-39677,-78172,-83353,65299,27621,-13589,81003,81352,65639,-8400,-20021,-9319,-40100,-82222,-29158,59292,-17864,1854,-13590,33390,-35383,-24782,93814,-90724,9016,11854,-164,13134,79361,31295,13112,27236,-79322,-97486,-20824,72694,-9874,65089,-28485,76973,-57745,73983,95902,-39667,53160,69973,86152,89005,-2170,-85952,62979,96131,-49184,-56120,-88459,-28553,53302,-54338,-13486,79196,93788,76404,-41280,-2155,-72021,24594,-70401,-14041,-9977,82862,-58040,16007,93284,51634,-73979,-77195,-22027,12690,16959,4305,22567,-88409,48847,42142,91887,-49160,-30072,-19772,-92676,-14394,20072,-13762,-30353,-34420,-88750,-65933,99436,40798,1242,37909,-81276,-17400,-91546,29505,-33893,22132,-74036,92553,-73205,-26926,90122,-44319,-40211,-69215,1285,-31885,94853,17290,89703,-53203,48605,93865,13566,-27478,28070,-52833,26205,31051,50273,22421,7418,-47813,-88124,11168,8174,-79491,-80782,16974,87388,7603,-50470,27034,-90529,-54082,-10182,93831,-3597,47281,84648,93651,31052,-82388,-89422,98556,79112,-87779,-24555,83769,-55187,-51145,45858,-42933,-9607,-80186,16211,15556,16740,17840,-39144,-31768,-90890,7462,91674,49390,-56143,90558,-74940,25584,53095,7683,-81470,-7509,62455,-51130,-49065,-24107,71972,32053,-22995,-48748,74506,-53317,16313,48406,-81505,-74799,12252,-73925,90091,-35587,-91575,89703,-77127,-99067,-32427,59756,45066,-47285,-85506,-35746,-25387,44019,25245,-21218,51554,-62401,-51795,-39347,11997,-18229,-98050,64535,-27589,43483,95201,-59430,-69483,-72512,27951,-27359,94575,22190,55793,-46630,17907,-74168,-88746,-18664,9194,-4899,44035,-11052,-96660,89851,80034,-99907,97430,-65509,-40157,3401,26872,14534,80798,23031,-18725,508,8199,-53802,-52619,55002,8005,-90715,87817,48897,32213,-916,-62445,24669,-63206,12475,10696,9461,-62410,62983,17923,89688,-39388,-36915,-75741,-45004,73136,-85529,-91217,20017,60807,77978,56766,70255,-11342,-93163,-85694,29039,44869,-20412,-55199,-24280,-19064,-54695,31641,-24707,39187,-49633,-13806,-92890,-22245,-11961,40336,65258,52662,44383,80505,-41167,39528,-42634,-21868,-14871,-61997,-90225,53520,47194,36325,11962,12689,89839,-58283,13109,99499,-24059,81125,2952,89300,-36639,-95633,66163,15164,-40478,80236,64345,-75210,20330,-33223,28815,21684,-94824,-62011,-80282,47793,26003,-25502,16620,-41533,59278,-14046,-18145,59683,-4859,-56873,-47460,-34805,23522,26805,-41312,-97626,-68154,-2436,-48284,90092,70584,78894,39230,3718,-53433,45183,80069,-50052,61676,-59669,-19005,5472,-23084,40132,37655,-80795,-7762,-30664,-27451,-61039,53496,-89997,50720,27625,94362,-14246,-55055,959,-61234,35236,-47529,92682,95910,93892,-2820,84725,27300,-37260,51928,92619,49477,-82578,31404]))
