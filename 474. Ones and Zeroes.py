from utils import memo

class Solution(object):
    def findMaxForm(self, strs, m, n):
        """
        :type strs: List[str]
        :type m: int
        :type n: int
        :rtype: int
        """
        count = sorted([(s.count('0'), len(s)) for s in strs])
        length = len(count)
        for i in range(len(count) - 2, -1, -1):
            if count[i] != count[i + 1]:
                last_type = i + 1
                break
        else:
            last_type = 0
        last_left = length - last_type

        cache = {}

        def dfs(i, mm, nn, min_n):
            args = (i, mm, nn, min_n)
            if args in cache:
                return cache[args]

            if i >= last_type: # this really depressed me
                m0 = count[last_type][0]
                n0 = count[last_type][1] - count[last_type][0]
                return min(last_left if m0 == 0 else mm // m0,
                           last_left if n0 == 0 else nn // n0,
                           last_left)
            if count[i][0] > mm:
                return 0

            n3 = count[i][1] - count[i][0]
            ret = dfs(i+1, mm, nn, min(min_n, n3-1))
            if n3 <= min_n and mm >= count[i][0] and nn >= n3:
                ret = max(1 + dfs(i+1, mm-count[i][0], nn-n3, min_n), ret)
            cache[args] = ret
            return ret
        ret = dfs(0, m, n, float('inf'))
        return ret

        # # MRE
        # count = sorted([(s.count('0'), len(s)) for s in strs])
        # length = len(count)

        # @memo
        # def dfs(i, mm, nn, min_n):
        #     if i >= length or count[i][0] > mm:
        #         return 0

        #     n3 = count[i][1] - count[i][0]
        #     ret = dfs(i+1, mm, nn, min(min_n, n3))
        #     if n3 <= min_n and mm >= count[i][0] and nn >= n3:
        #         ret = max(1 + dfs(i+1, mm-count[i][0], nn-n3, min_n), ret)
        #     return ret

        # return dfs(0, m, n, float('inf'))

import time
tic = time.time()

assert Solution().findMaxForm(["10","0001","111001","1","0"], 50, 50) == 5
assert Solution().findMaxForm(["0","0","1","1"], 2, 2) == 4
assert Solution().findMaxForm({"10", "0001", "111001", "1", "0"}, 5, 3) == 4
assert Solution().findMaxForm({"10", "0", "1"}, 1, 1) == 2
print(Solution().findMaxForm(["0","11","1000","01","0","101","1","1","1","0","0","0","0","1","0","0110101","0","11","01","00","01111","0011","1","1000","0","11101","1","0","10","0111"], 9, 80))
print(Solution().findMaxForm(["0000111","0000111111","01111111","0001","000111111","0000001111111","00011111","000011111","00000011","0111111","0000000001111111","0011","001111","00000001111","0011","0000111111111","0001111111","011111111"], 4, 6))

strs = ["1101","0101","01","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101","1101","0101"]
tic = time.time()
Solution().findMaxForm(strs, 66, 26)
print(time.time() - tic)
# tic = time.time()
# Solution().findMaxForm2(strs, 66, 26)
# print(time.time() - tic)
